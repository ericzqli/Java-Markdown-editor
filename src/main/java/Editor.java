import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import javax.swing.text.html.HTMLDocument.HTMLReader;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;
// import org.graalvm.compiler.nodes.memory.MemoryCheckpoint.Single;

import java.text.SimpleDateFormat;
import java.util.Date;
import main.java.SinglePost;


/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */



public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your GET method handling code here
    // currently we simply show the page generated by "edit.jsp"
        String actionName = request.getParameter("action");
        if(actionName.equals("open")) {
            handleOpenAction(request, response);
        } else if (actionName.equals("save")) {
            handleSaveAction(request, response);
        } else if (actionName.equals("delete")) {
            handleDeleteAction(request, response);
        } else if (actionName.equals("preview")) {
            handlePreviewAction(request, response);
        } else if (actionName.equals("list")) {
            handleListAction(request, response);
        } else {
            request.getRequestDispatcher("/invalidRequest.jsp").forward(request, response);
        }

        
    }
    private void handleListAction(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException 
    {   String username = request.getParameter("username");
        List<SinglePost> dbData = getAllDataJDBC(username);
      
        request.setAttribute("data", dbData);
        request.getRequestDispatcher("/list.jsp").forward(request, response);
        return;
    }


    private void handleOpenAction(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException 
    {
        String username = request.getParameter("username");
        String postidStr = request.getParameter("postid");
        if(username == null || postidStr == null) {
            handleInvalidRequest(request, response);
            return;
        }
        int postid = Integer.parseInt(postidStr);

        // Handle title and body
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        
        

        if(postid <= 0) {
            if(title == null) {
                request.setAttribute("title", "");
            }
            if(body == null) {
                request.setAttribute("body", "");
            }
        } else {
            if(title == null || body == null) {
                String[] titleBody = retrieveJDBC(username, postid);
                if(titleBody[0].equals("canNotFindData")) {
                    handleInvalidRequest(request, response);
                    return;
                }
                request.setAttribute("title", titleBody[0]);
                request.setAttribute("body", titleBody[1]);
            }
        }

        request.getRequestDispatcher("/edit.jsp").forward(request, response);
        return;
    }

    private void handleSaveAction(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException 
    {
        String username = request.getParameter("username");
        String postidStr = request.getParameter("postid");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        SimpleDateFormat sdf = new SimpleDateFormat();
        sdf.applyPattern("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        String curTime = sdf.format(date);

        String modified = curTime;
        String created = curTime;
        if(username == null || postidStr == null || title == null || body == null) {
            handleInvalidRequest(request, response);
            return;
        }
        int postid = Integer.parseInt(postidStr);
        if(postid <= 0) {
            postid = maxPostIdJDBC(username) + 1;
            saveContentJDBC(username, postid, title, body, modified, created);
        } else {
            String[] titleBodyDate = retrieveJDBCDate(username, postid);
            if(!titleBodyDate[0].equals("canNotFindData")) {
                updateJDBC(username, postid, title, body, modified, titleBodyDate[2]);
            }
        }
        
        request.getRequestDispatcher("/edit.jsp").forward(request, response);
        return;

    }

    private void handleDeleteAction(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException
    {
        String username = request.getParameter("username");
        String postidStr = request.getParameter("postid");
        if(username == null || postidStr == null) {
            handleInvalidRequest(request, response);
            return;
        }
        int postid = Integer.parseInt(postidStr);
        deleteJDBC(username, postid);

        //back to list.jsp
        List<SinglePost> dbData = getAllDataJDBC(username);
        // int t =  getAllDataJDBC("test");
        // SinglePost post = new SinglePost("11", 11, "11","11","11","11");
        // dbData.add(post);
        // request.setAttribute("data",dbData.get(1).title);
        // System.out.println(dbData.get(0).body);
        // System.out.println(dbData.get(0).title);
        // System.out.println(post.getUsername());
        // System.out.print("testeststetstestest");
        request.setAttribute("data", dbData);
        request.getRequestDispatcher("/list.jsp").forward(request, response);
        return;
    }

    private void handlePreviewAction(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException
    {
        String username = request.getParameter("username");
        String postidStr = request.getParameter("postid");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        if(username == null || postidStr == null || title == null || body == null) {
            handleInvalidRequest(request, response);
            return;
        }
        Parser parser = Parser.builder().build();
        Node document = parser.parse(body);
        HtmlRenderer renderer = HtmlRenderer.builder().build();


        int postid = Integer.parseInt(postidStr);
        request.setAttribute("body", renderer.render(document));
        request.getRequestDispatcher("/preview.jsp").forward(request, response);
        return;

    }






    //Function for handling the Bad Request
    private void handleInvalidRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException 
    {
        request.getRequestDispatcher("invalidRequest.jsp").forward(request, response);
    }

    //JDBC Function
    private List<SinglePost> getAllDataJDBC(String username) {
        List<SinglePost> postsList = new ArrayList<>();
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return postsList;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        // int t = 0;
        try {
            
            /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 
			
			/* You can think of a JDBC Statement object as a channel
			sitting on a connection, and passing one or more of your
			SQL statements (which you ask it to execute) to the DBMS*/
            PreparedStatement retrieve = c.prepareStatement(
                "SELECT * FROM Posts WHERE username = ? "
            );
            retrieve.setString(1, username);
            rs = retrieve.executeQuery();
            while(rs.next()) {
                // t += 1;
                SinglePost newPost = new SinglePost(rs.getString("username"), rs.getInt("postid"),
                rs.getString("title"), rs.getString("body"), rs.getString("modified"), 
                rs.getString("created"));
                postsList.add(newPost);
            }
           
           
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return postsList;

    }




    //Retrieve Data
    private String[] retrieveJDBC(String username, int postid) {
        String[] titleBody = new String[2];
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return titleBody;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
            String title, body;
            
    
            /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 
			
			/* You can think of a JDBC Statement object as a channel
			sitting on a connection, and passing one or more of your
			SQL statements (which you ask it to execute) to the DBMS*/
            PreparedStatement retrieve = c.prepareStatement(
                "SELECT * FROM Posts WHERE username = ? AND postid = ?"
            );
            retrieve.setString(1, username);
            retrieve.setInt(2, postid);
            
            rs = retrieve.executeQuery();
            if(!rs.next()) {
                titleBody[0] = "canNotFindData";
                return titleBody;
            }
            titleBody[0] = rs.getString("title");
            titleBody[1] = rs.getString("body");
           
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return titleBody;

    }
    private String[] retrieveJDBCDate(String username, int postid) {
        String[] titleBodyDate = new String[3];
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return titleBodyDate;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
            String title, body;
            
    
            /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 
			
			/* You can think of a JDBC Statement object as a channel
			sitting on a connection, and passing one or more of your
			SQL statements (which you ask it to execute) to the DBMS*/
            PreparedStatement retrieve = c.prepareStatement(
                "SELECT * FROM Posts WHERE username = ? AND postid = ?"
            );
            retrieve.setString(1, username);
            retrieve.setInt(2, postid);
            
            rs = retrieve.executeQuery();
            if(!rs.next()) {
                titleBodyDate[0] = "canNotFindData";
                return titleBodyDate;
            }
            titleBodyDate[0] = rs.getString("title");
            titleBodyDate[1] = rs.getString("body");
            titleBodyDate[2] = rs.getString("created");
           
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return titleBodyDate;

    }
    private int maxPostIdJDBC(String username) {
        int postId = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return postId;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
           /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 	
			/* You can think of a JDBC Statement object as a channel
			sitting on a connection, and passing one or more of your
			SQL statements (which you ask it to execute) to the DBMS*/
            PreparedStatement retrieve = c.prepareStatement(
                "SELECT MAX(postid) FROM Posts WHERE username = ? "
            );
            retrieve.setString(1, username);
            rs = retrieve.executeQuery();
            // String postidStr = rs.getString("MAX(postid)");
            while(rs.next()) {
                postId = Integer.valueOf(rs.getString("MAX(postid)"));   
            }
            // if(postidStr.equals(null)) {
            //     postId = Integer.valueOf(postidStr);
            // }
                    
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        // System.out.println("PostId:");
        // System.out.println(postId);
        return postId;

    }
    private void updateJDBC(String username, int postid, String title, 
        String body, String modified, String created) {
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
           /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 	
            PreparedStatement ps = c.prepareStatement(
                "UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?"
            );
            ps.setString(1, title);
            ps.setString(2, body);
            ps.setString(3, modified);
            ps.setString(4, username);
            ps.setInt(5, postid);
            ps.executeUpdate();
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return;

        }
    private void saveContentJDBC(String username, int postid, String title, 
    String body, String modified, String created) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
           /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 	
            PreparedStatement ps = c.prepareStatement(
                "INSERT INTO Posts (username, postid, title, body, modified, created) VALUES(?, ?, ?, ?, ?,?)"
            );
            ps.setString(1, username);
            ps.setInt(2, postid);
            ps.setString(3, title);
            ps.setString(4, body);
            ps.setString(5, modified);
            ps.setString(6, created);
            ps.executeUpdate();
            System.out.println("Done");
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return;
    }

    private void deleteJDBC(String username, int postid) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return;
        }
        Connection c = null;
        Statement  s = null; 
        ResultSet rs = null; 
        try {
           /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 	
            PreparedStatement ps = c.prepareStatement(
                "DELETE FROM Posts WHERE username = ? AND postid = ?"
            );
            ps.setString(1, username);
            ps.setInt(2, postid);
            ps.executeUpdate();
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
        return;
    }




    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        request.getRequestDispatcher("/edit.jsp").forward(request, response);
    }
}

